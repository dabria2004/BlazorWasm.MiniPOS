@page "/SaleReport"

@*<MudDatePicker PickerVariant="PickerVariant.Dialog"
               Label="Date Format" HelperText="For custom cultures"
               DateFormat="dd/MM/yyyy" Date="@(DateTime.Now)"
               DateChanged="HandleDateValueChanged" />
*@
@*<MudDatePicker  Label="Select a date" DateChanged="HandleDateValueChanged"/>
*@
@*<MudItem xs="12" sm="6">
    </MudItem>*@
<MudItem xs="12" sm="6">
    <MudDatePicker @ref="_picker" DateFormat="yyyy/MM/dd" Label="With action buttons" @bind-Date="SelectedDate">
        <PickerActions>
            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
            <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="DatePicker">Ok</MudButton>
        </PickerActions>
    </MudDatePicker>
</MudItem>

@if (lstSaleReport != null)
{
    <RecentSaleReportPage Model="lstSaleReport" />
}

@code {
    private DateTime? SelectedDate { get; set; } = DateTime.Today;
    private SaleReportResponseDataModel lstSaleReport = new();
    MudDatePicker _picker;
    //DateTime? date = DateTime.Today;
    //private async Task HandleDateValueChanged(DateTime? value)
    //{
    //    SelectedDate = value.Value;
    //    Model = await db.SaleReport(SelectedDate);
    //}

    private async Task DatePicker()
    {
        lstSaleReport = await db.SaleReport(Convert.ToDateTime(SelectedDate));
        _picker.Close();
    }
}
