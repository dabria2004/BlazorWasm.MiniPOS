<div class="row" id="divLoading">
    <div class="rz-p-sm-12 rz-text-align-center">
        <RadzenDropDown @bind-Value=@Model.product_id Data=@lstProduct
                        TextProperty="product_name" ValueProperty="product_id"
                        Change="ProductNameChangeEvent2"
                        AllowClear=true Placeholder="Select product"
                        Style="width: 100%; max-width: 400px;" />
    </div>
    @*<div class="col-md-6 mt-5 t-r" style="padding-left: 50px">
        <label for="ProductName">Product Name</label>
        <select name="ProductName" class="form-select" aria-label="Default select example"
                value="@Model.product_id"
                @onchange="ProductNameChangeEvent"
                required="">
            @foreach (var item in lstProduct)
            {
                <option value="@item.product_id">
                    @item.product_name
                </option>
            }
        </select>
    </div>*@
    @*<RadzenColumn Size="12" SizeMD="6" SizeLG="3">
    <RadzenFormField Text="Outlined/Default" Style="width: 100%;">
    <RadzenTextBox @bind-Value="@Model.product_price" Style="width: 100%;" />
    </RadzenFormField>
    </RadzenColumn>*@
    <div class="col-md-6 mt-5 t-r" style="padding-left: 50px">
        <label for="floatingTextarea">Product Price</label>
        <input type="text" class="form-control t-r" name="Product_price" @bind-value="Model.product_price" disabled="disabled" placeholder="0" />
    </div>
    <div class="col-md-6 mt-5 t-r" style="padding-left: 50px">
        <label for="floatingTextarea">Product Qty</label>
        <input type="text" class="form-control t-r"
               name="Product_qty"
               value="@Model.product_qty"
               @onchange="ProductQtyOnChangeEvent"
               placeholder="0" />
        <p id="ProductQtyError" style="color : red"></p>
    </div>
    <div class="col-md-6 mt-5 t-r" style="padding-left: 50px">
        <label for="floatingTextarea">Total Amount</label>
        <input type="text" class="form-control t-r" name="Sale_total_amount" @bind-value="Model.product_total_price" disabled="disabled" placeholder="0" />
    </div>
    <div class="col-md-6 mt-5 t-r" style="padding-left: 50px">
    </div>
    <div class="col-md-6 mt-5 t-r" style="padding-left: 50px">
        <label for="floatingTextarea">Total Items Amount</label>
        <input type="text" class="form-control t-r" name="Grand_Total" @bind-value="grand_total" disabled="disabled" />
    </div>
    <div class="col-md-6 mt-5" style="padding-left: 50px">
        <button type="button" @onclick="Add" class="btn btn-success mt-3">Add</button>
        <button type="button" id="btnFinish" class="btn btn-success mt-3">Finish</button>
    </div>

    <div class="col-md-12 mt-5" style="padding-left: 50px">

        @if (lstProductSale != null)
        {
            <RecentProductSalePage Model="lstProductSale"
                               OnDeleteProductSaleClick="DeleteProductSale"
                               OnEditProductSaleClick="EditProductSale" />
        }
    </div>
</div>

@code {
    private List<ProductNameListDataModel> lstProduct = new();
    private ProductSaleDataModel Model = new();
    private ProductSaleResponseDataModel lstProductSale = new();
    //private string product_id;
    //private string product_qty;
    //private int product_price = 0;
    //private string product_name = string.Empty;
    private bool isEdit = false;
    private int grand_total;
    private string value = "";
    protected override async Task OnInitializedAsync()
    {
        lstProduct = await db.GetProductNameList();
        lstProductSale = await db.GetRecentProductSale();
        grand_total = await db.GetGrandTotal();
    }
    async Task ProductNameChangeEvent2()
    {
        if (isEdit) return;
        //Model.product_id = new Guid(e.Value.ToString());
        //var item =  db.GetProduct(new Guid(product_id));
        if (Model.product_id != null)
        {
            var lst = await db.GetProductName(Model.product_id);
            Model.product_price = lst.product_sale_price;
        }
        else
        {
            Model.product_price = 0;
        }
    }
    async Task ProductNameChangeEvent(ChangeEventArgs e)
    {
        if (isEdit) return;
        Model.product_id = new Guid(e.Value.ToString());
        //var item =  db.GetProduct(new Guid(product_id));
        if (Model.product_id != null)
        {
            var lst = await db.GetProductName(Model.product_id);
            Model.product_price = lst.product_sale_price;
        }
        else
        {
            Model.product_price = 0;
        }
    }

    //async Task ProdcutQtyKeyPressEvent(KeyboardEventArgs e)
    //{
    //    int price = await db.GetProductName(new Guid(product_id));
    //    product_price = e.Key.ToString();
    //    product_price = string.IsNullOrEmpty(product_price) ? "0" : product_price;
    //    //if (string.IsNullOrEmpty(product_price))
    //    //    product_price = "0";
    //    Model.product_qty = Convert.ToInt32(product_price);
    //    Model.product_total_price = Model.product_qty * price;
    //}

    async Task ProductQtyOnChangeEvent(ChangeEventArgs e)
    {
        ProductDataModel item = new();
        if (Model.product_id != null)
            item = await db.GetProductName(Model.product_id);
        Model.product_qty = Convert.ToInt32(e.Value.ToString());
        Model.product_price = item.product_sale_price;
        //Model.product_qty = string.IsNullOrEmpty(Model.product_qty) ? "0" : Model.product_qty;
        //if (string.IsNullOrEmpty(product_price))
        //    product_price = "0";
        //Model.product_name = null ? lst.product_name : product_name;
        Model.product_name = string.IsNullOrEmpty(Model.product_name) ?
        item.product_name : Model.product_name;
        if (Model.product_price == 0)
        {
            Model.product_total_price = Model.product_qty * item.product_sale_price;
        }
        else
        {
            Model.product_total_price = Model.product_qty * Model.product_price;
        }
        grand_total = await db.GetGrandTotal();
    }

    async Task Add()
    {
        Model.product_id = Model.product_id;
        if (await db.CheckIsProductExit(Model.product_sale_id))
        {
            await db.UpdateProductSale(Model);
        }
        else
        {
            await db.SetSaleProduct(Model);
        }
        grand_total = await db.GetGrandTotal();
        lstProductSale = await db.GetRecentProductSale();
        Model = new();
    }

    async Task DeleteProductSale(Guid guid)
    {
        await db.DeleteProductSale(guid);
        //await db.GetRecentExpenses();
        grand_total = await db.GetGrandTotal();
        lstProductSale = await db.GetRecentProductSale();
    }

    async Task EditProductSale(Guid guid)
    {
        isEdit = true;
        Model = await db.EditProductSale(guid);
        //await db.GetRecentExpenses();
        isEdit = false;
    }
}
