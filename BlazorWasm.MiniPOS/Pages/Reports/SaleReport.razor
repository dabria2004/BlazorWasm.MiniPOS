@page "/sale-report"

@*<MudDatePicker PickerVariant="PickerVariant.Dialog"
               Label="Date Format" HelperText="For custom cultures"
               DateFormat="dd/MM/yyyy" Date="@(DateTime.Now)"
               DateChanged="HandleDateValueChanged" />
*@
@*<MudDatePicker  Label="Select a date" DateChanged="HandleDateValueChanged"/>
*@
@*<MudItem xs="12" sm="6">
    </MudItem>*@
@if (Type == EnumFormType.List)
{
    <MudItem xs="12" sm="6">
        @*<MudDatePicker @ref="_picker" DateFormat="dd-MM-yyyy" Label="With action buttons" @bind-Date="SelectedDate">
    <PickerActions>
    <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.Clear())">Clear</MudButton>
    <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
    <MudButton Color="Color.Primary" OnClick="DatePicker">Ok</MudButton>
    </PickerActions>
    </MudDatePicker>*@
        <RadzenDatePicker @bind-Value=@SelectedDate DateFormat="dd-MM-yyyy" />
        <RadzenButton Variant="Radzen.Variant.Flat"
                      Shade="Shade.Lighter" Click="DatePicker"
                      Text="Search" ButtonStyle="ButtonStyle.Primary" />
    </MudItem>
}
@if (_saleReport != null)
{
    <RecentSaleReportPage Model="_saleReport" OnDetailClick="Detail" OnBackClick="Back" />
}

@code {
    private DateTime? SelectedDate { get; set; } = DateTime.Today;
    private SaleReportResponseDataModel? _saleReport = new();
    //MudDatePicker _picker;
    private EnumFormType Type { get; set; } = EnumFormType.List;
    //DateTime? date = DateTime.Today;
    //private async Task HandleDateValueChanged(DateTime? value)
    //{
    //    SelectedDate = value.Value;
    //    Model = await db.SaleReport(SelectedDate);
    //}

    private async Task DatePicker()
    {
        _saleReport = await db.SaleReport(Convert.ToDateTime(SelectedDate));
        //_picker.Close();
    }

    void Detail(SaleVoucherHeadDataModel data)
    {
        Type = EnumFormType.Report;
    }

    void Back()
    {
        Type = EnumFormType.List;
    }
}
